// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: scheduleTask/scheduleTask.proto

package ScheduleTask

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ScheduleTask service

func NewScheduleTaskEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ScheduleTask service

type ScheduleTaskService interface {
	UpdateBrandModelTask(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error)
	UpdateEnumConfig(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error)
	UpdateCarListStatistical(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error)
	KeywordsCacheRefresh(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error)
	UpdateCarValuationGuidesSync(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error)
	PublishActiveCarCampaign(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error)
	UpdateCarLibSync(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error)
	ValidateCarWarranty(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error)
}

type scheduleTaskService struct {
	c    client.Client
	name string
}

func NewScheduleTaskService(name string, c client.Client) ScheduleTaskService {
	return &scheduleTaskService{
		c:    c,
		name: name,
	}
}

func (c *scheduleTaskService) UpdateBrandModelTask(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "ScheduleTask.UpdateBrandModelTask", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTaskService) UpdateEnumConfig(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "ScheduleTask.UpdateEnumConfig", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTaskService) UpdateCarListStatistical(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "ScheduleTask.UpdateCarListStatistical", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTaskService) KeywordsCacheRefresh(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "ScheduleTask.KeywordsCacheRefresh", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTaskService) UpdateCarValuationGuidesSync(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "ScheduleTask.UpdateCarValuationGuidesSync", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTaskService) PublishActiveCarCampaign(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "ScheduleTask.PublishActiveCarCampaign", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTaskService) UpdateCarLibSync(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "ScheduleTask.UpdateCarLibSync", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTaskService) ValidateCarWarranty(ctx context.Context, in *common.EmptyDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "ScheduleTask.ValidateCarWarranty", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScheduleTask service

type ScheduleTaskHandler interface {
	UpdateBrandModelTask(context.Context, *common.EmptyDto, *common.Response) error
	UpdateEnumConfig(context.Context, *common.EmptyDto, *common.Response) error
	UpdateCarListStatistical(context.Context, *common.EmptyDto, *common.Response) error
	KeywordsCacheRefresh(context.Context, *common.EmptyDto, *common.Response) error
	UpdateCarValuationGuidesSync(context.Context, *common.EmptyDto, *common.Response) error
	PublishActiveCarCampaign(context.Context, *common.EmptyDto, *common.Response) error
	UpdateCarLibSync(context.Context, *common.EmptyDto, *common.Response) error
	ValidateCarWarranty(context.Context, *common.EmptyDto, *common.Response) error
}

func RegisterScheduleTaskHandler(s server.Server, hdlr ScheduleTaskHandler, opts ...server.HandlerOption) error {
	type scheduleTask interface {
		UpdateBrandModelTask(ctx context.Context, in *common.EmptyDto, out *common.Response) error
		UpdateEnumConfig(ctx context.Context, in *common.EmptyDto, out *common.Response) error
		UpdateCarListStatistical(ctx context.Context, in *common.EmptyDto, out *common.Response) error
		KeywordsCacheRefresh(ctx context.Context, in *common.EmptyDto, out *common.Response) error
		UpdateCarValuationGuidesSync(ctx context.Context, in *common.EmptyDto, out *common.Response) error
		PublishActiveCarCampaign(ctx context.Context, in *common.EmptyDto, out *common.Response) error
		UpdateCarLibSync(ctx context.Context, in *common.EmptyDto, out *common.Response) error
		ValidateCarWarranty(ctx context.Context, in *common.EmptyDto, out *common.Response) error
	}
	type ScheduleTask struct {
		scheduleTask
	}
	h := &scheduleTaskHandler{hdlr}
	return s.Handle(s.NewHandler(&ScheduleTask{h}, opts...))
}

type scheduleTaskHandler struct {
	ScheduleTaskHandler
}

func (h *scheduleTaskHandler) UpdateBrandModelTask(ctx context.Context, in *common.EmptyDto, out *common.Response) error {
	return h.ScheduleTaskHandler.UpdateBrandModelTask(ctx, in, out)
}

func (h *scheduleTaskHandler) UpdateEnumConfig(ctx context.Context, in *common.EmptyDto, out *common.Response) error {
	return h.ScheduleTaskHandler.UpdateEnumConfig(ctx, in, out)
}

func (h *scheduleTaskHandler) UpdateCarListStatistical(ctx context.Context, in *common.EmptyDto, out *common.Response) error {
	return h.ScheduleTaskHandler.UpdateCarListStatistical(ctx, in, out)
}

func (h *scheduleTaskHandler) KeywordsCacheRefresh(ctx context.Context, in *common.EmptyDto, out *common.Response) error {
	return h.ScheduleTaskHandler.KeywordsCacheRefresh(ctx, in, out)
}

func (h *scheduleTaskHandler) UpdateCarValuationGuidesSync(ctx context.Context, in *common.EmptyDto, out *common.Response) error {
	return h.ScheduleTaskHandler.UpdateCarValuationGuidesSync(ctx, in, out)
}

func (h *scheduleTaskHandler) PublishActiveCarCampaign(ctx context.Context, in *common.EmptyDto, out *common.Response) error {
	return h.ScheduleTaskHandler.PublishActiveCarCampaign(ctx, in, out)
}

func (h *scheduleTaskHandler) UpdateCarLibSync(ctx context.Context, in *common.EmptyDto, out *common.Response) error {
	return h.ScheduleTaskHandler.UpdateCarLibSync(ctx, in, out)
}

func (h *scheduleTaskHandler) ValidateCarWarranty(ctx context.Context, in *common.EmptyDto, out *common.Response) error {
	return h.ScheduleTaskHandler.ValidateCarWarranty(ctx, in, out)
}
