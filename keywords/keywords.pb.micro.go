// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: keywords/keywords.proto

package keywords

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Keywords service

func NewKeywordsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Keywords service

type KeywordsService interface {
	// 添加关键字，返回 data：nil
	Add(ctx context.Context, in *KeywordsDto, opts ...client.CallOption) (*common.Response, error)
	// 根据关键字id删除关键字，返回 data：nil
	Delete(ctx context.Context, in *KeywordsConditionDto, opts ...client.CallOption) (*common.Response, error)
	// 更新关键字，返回 data：nil
	Update(ctx context.Context, in *KeywordsDto, opts ...client.CallOption) (*common.Response, error)
	//获取关键字信息: 返回data：common.PagedList
	List(ctx context.Context, in *KeywordsConditionDto, opts ...client.CallOption) (*common.Response, error)
}

type keywordsService struct {
	c    client.Client
	name string
}

func NewKeywordsService(name string, c client.Client) KeywordsService {
	return &keywordsService{
		c:    c,
		name: name,
	}
}

func (c *keywordsService) Add(ctx context.Context, in *KeywordsDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Keywords.Add", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keywordsService) Delete(ctx context.Context, in *KeywordsConditionDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Keywords.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keywordsService) Update(ctx context.Context, in *KeywordsDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Keywords.Update", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keywordsService) List(ctx context.Context, in *KeywordsConditionDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Keywords.List", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Keywords service

type KeywordsHandler interface {
	// 添加关键字，返回 data：nil
	Add(context.Context, *KeywordsDto, *common.Response) error
	// 根据关键字id删除关键字，返回 data：nil
	Delete(context.Context, *KeywordsConditionDto, *common.Response) error
	// 更新关键字，返回 data：nil
	Update(context.Context, *KeywordsDto, *common.Response) error
	//获取关键字信息: 返回data：common.PagedList
	List(context.Context, *KeywordsConditionDto, *common.Response) error
}

func RegisterKeywordsHandler(s server.Server, hdlr KeywordsHandler, opts ...server.HandlerOption) error {
	type keywords interface {
		Add(ctx context.Context, in *KeywordsDto, out *common.Response) error
		Delete(ctx context.Context, in *KeywordsConditionDto, out *common.Response) error
		Update(ctx context.Context, in *KeywordsDto, out *common.Response) error
		List(ctx context.Context, in *KeywordsConditionDto, out *common.Response) error
	}
	type Keywords struct {
		keywords
	}
	h := &keywordsHandler{hdlr}
	return s.Handle(s.NewHandler(&Keywords{h}, opts...))
}

type keywordsHandler struct {
	KeywordsHandler
}

func (h *keywordsHandler) Add(ctx context.Context, in *KeywordsDto, out *common.Response) error {
	return h.KeywordsHandler.Add(ctx, in, out)
}

func (h *keywordsHandler) Delete(ctx context.Context, in *KeywordsConditionDto, out *common.Response) error {
	return h.KeywordsHandler.Delete(ctx, in, out)
}

func (h *keywordsHandler) Update(ctx context.Context, in *KeywordsDto, out *common.Response) error {
	return h.KeywordsHandler.Update(ctx, in, out)
}

func (h *keywordsHandler) List(ctx context.Context, in *KeywordsConditionDto, out *common.Response) error {
	return h.KeywordsHandler.List(ctx, in, out)
}
