// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: carCostProto/carCost.proto

package carCostProto

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CarCost service

func NewCarCostEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CarCost service

type CarCostService interface {
	// 添加指定车辆的费用，返回 data：nil
	Add(ctx context.Context, in *AddCarCostReq, opts ...client.CallOption) (*common.Response, error)
	// 删除指定车辆的费用，返回 data：nil
	Delete(ctx context.Context, in *DeleteCostReq, opts ...client.CallOption) (*common.Response, error)
	// 获取指定车辆id的车辆费用详情：返回 data: CarCostDetailProtoDto
	Get(ctx context.Context, in *common.IdDto, opts ...client.CallOption) (*common.Response, error)
	// 查询车辆费用列表：返回 Data = common.PageList{
	//              List = List<CarCostListProtoDto>
	//          }
	List(ctx context.Context, in *ListCostReq, opts ...client.CallOption) (*common.Response, error)
	// 将车辆表中的整备信息整合到cost表中，返回 data：nil
	MoveOldReconditionData2CostTable(ctx context.Context, in *common.IdDto, opts ...client.CallOption) (*common.Response, error)
}

type carCostService struct {
	c    client.Client
	name string
}

func NewCarCostService(name string, c client.Client) CarCostService {
	return &carCostService{
		c:    c,
		name: name,
	}
}

func (c *carCostService) Add(ctx context.Context, in *AddCarCostReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarCost.Add", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carCostService) Delete(ctx context.Context, in *DeleteCostReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarCost.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carCostService) Get(ctx context.Context, in *common.IdDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarCost.Get", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carCostService) List(ctx context.Context, in *ListCostReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarCost.List", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carCostService) MoveOldReconditionData2CostTable(ctx context.Context, in *common.IdDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarCost.MoveOldReconditionData2CostTable", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CarCost service

type CarCostHandler interface {
	// 添加指定车辆的费用，返回 data：nil
	Add(context.Context, *AddCarCostReq, *common.Response) error
	// 删除指定车辆的费用，返回 data：nil
	Delete(context.Context, *DeleteCostReq, *common.Response) error
	// 获取指定车辆id的车辆费用详情：返回 data: CarCostDetailProtoDto
	Get(context.Context, *common.IdDto, *common.Response) error
	// 查询车辆费用列表：返回 Data = common.PageList{
	//              List = List<CarCostListProtoDto>
	//          }
	List(context.Context, *ListCostReq, *common.Response) error
	// 将车辆表中的整备信息整合到cost表中，返回 data：nil
	MoveOldReconditionData2CostTable(context.Context, *common.IdDto, *common.Response) error
}

func RegisterCarCostHandler(s server.Server, hdlr CarCostHandler, opts ...server.HandlerOption) error {
	type carCost interface {
		Add(ctx context.Context, in *AddCarCostReq, out *common.Response) error
		Delete(ctx context.Context, in *DeleteCostReq, out *common.Response) error
		Get(ctx context.Context, in *common.IdDto, out *common.Response) error
		List(ctx context.Context, in *ListCostReq, out *common.Response) error
		MoveOldReconditionData2CostTable(ctx context.Context, in *common.IdDto, out *common.Response) error
	}
	type CarCost struct {
		carCost
	}
	h := &carCostHandler{hdlr}
	return s.Handle(s.NewHandler(&CarCost{h}, opts...))
}

type carCostHandler struct {
	CarCostHandler
}

func (h *carCostHandler) Add(ctx context.Context, in *AddCarCostReq, out *common.Response) error {
	return h.CarCostHandler.Add(ctx, in, out)
}

func (h *carCostHandler) Delete(ctx context.Context, in *DeleteCostReq, out *common.Response) error {
	return h.CarCostHandler.Delete(ctx, in, out)
}

func (h *carCostHandler) Get(ctx context.Context, in *common.IdDto, out *common.Response) error {
	return h.CarCostHandler.Get(ctx, in, out)
}

func (h *carCostHandler) List(ctx context.Context, in *ListCostReq, out *common.Response) error {
	return h.CarCostHandler.List(ctx, in, out)
}

func (h *carCostHandler) MoveOldReconditionData2CostTable(ctx context.Context, in *common.IdDto, out *common.Response) error {
	return h.CarCostHandler.MoveOldReconditionData2CostTable(ctx, in, out)
}
