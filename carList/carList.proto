syntax = "proto3";

package car;
import "github.com/cargod-bj/b2c-proto-common/common/common.proto";

option go_package = "github.com/cargod-bj/b2c-car-api/carList";

/*
  获取上架车辆服务
 */
service CarList {
  // 添加指定车辆，返回 data：nil
  rpc Add(CarListDto) returns (common.Response) {}
  // 根据车辆id删除车辆，返回 data：nil
  rpc Delete(CarListIdDto) returns (common.Response) {}
  // 更新指定车辆，返回 data：nil
  rpc Update(CarListDto) returns (common.Response) {}
  // 获取指定id的车辆：返回 data: CarListDto
  rpc Get(CarListIdDto) returns (common.Response) {}
  //获取车辆列表信息: 返回data：common.PagedList
  rpc List(common.Page) returns (common.Response){}
  //根据条件查询carlist
  rpc ListCondition(CarListCondition) returns (common.Response){}
  //根据查询carlist的location
  rpc ListLocation(common.Page) returns (common.Response){}
}

// 新增上架车辆dto
message CarListDto {
  // 车辆id，如果为新增，则此字段为0，否则为车辆id
  uint64 id = 1;
  //车辆在car表里的id
  uint64 car_id = 2;
  // 车辆的创建时间，如果为新增，或更新，则此字段无效
  uint64 create_time = 3;
  // 车辆的更新时间，如果为新增，或更新，则此字段无效
  uint64 update_time = 4;
  // 检查报告id
  uint64 inspection_id = 101;
  // 车辆状态
  uint32 status = 102;
  // 门店id
  uint64 store_id = 103;
  // 停车场id
  uint64 parking_id = 104;
  // 品牌id
  uint32 brand_id = 201;
  // 车型id
  uint32 model_id = 202;
  // 车variant
  string car_variant = 203;
  // 车照片url
  string image = 301;
  // 排量
  string car_engine = 401;
  // 年份
  uint32 car_year = 402;
  // 里程
  uint32 car_milage = 403;
  // 驾驶类型 手动,自动
  uint32 car_transmission = 404;
  // 卖价
  double exp_selling_price = 501;
  // 来源
  string source = 601;
  // 城市地区
  string location = 701;
  // 城市地区
  string location_address = 702;
  // 是否是Dealer发布
  uint32 is_dealer = 703;
  //排序
  uint32 seq = 704;
  //汽车类型例如suv
  uint32 car_type_id = 707;
  //经销商id
  uint64 dealer_id = 708;
  //燃油类型
  uint32 fuel_type = 709;
  //座椅个数
  uint32 seat_size = 710;
  //车漆颜色
  uint32 color = 711;
  //车辆特征
  string  car_type_name = 712;
  string  model_name = 705;
  string  brand_name = 706;
  uint32  recommend_order = 713;
  uint32 type = 714;
  string url = 715;
  uint64 location_id = 716;
}



//carlist查询条件
message CarListCondition {
  uint64 exp_selling_price_from = 1;//卖价
  uint64 exp_selling_price_to = 2;
  repeated uint64 model_id = 3; //车系
  repeated string model_name = 4;
  repeated uint64 brand_id = 5; //品牌
  repeated string brand_name = 6;
  repeated string variant = 7; //型号
  uint32 status = 8;
  uint32 year_from = 9;//年份
  uint32 year_to = 10;
  uint64 milage_from = 11;//里程
  uint64 milage_to = 12;
  repeated string transmission = 13;//驾驶类型 手动，自动
  repeated string engine = 14; //排量
  repeated uint32 color = 15;//颜色
  repeated uint32 fuel_type = 16;/*燃油*/
  repeated uint32 seat_type = 17;//座位数
  repeated uint64 parking_id = 18;//停车场
  repeated uint64 store_id = 20;//店铺
  repeated string source = 22;//来源
  string location = 23;//城市
  repeated uint64 location_id = 27;//地址id
  repeated uint64 dealer_id = 24;//经销商id
  repeated uint32 car_type_id = 30;//汽车类型
  uint32 recommendCount = 31; //推荐个数
  string keywords = 32; //关键字
  uint32 dealerType = 33;//经销商类型
  //carlist排序条件
  string sort_key = 25;
  uint32 sort_type = 26;
  uint32 page = 28;
  uint32 limit = 29;
}


// 上架车辆的id
message CarListIdDto {
  // 车辆id
  repeated uint64 id = 1;

}
// 上架车辆的位置
message LocationDto {
  // 车辆位置
  string location  = 1;

}
message CarListDtoList{
  repeated CarListDto CarListDto = 1;
}
//返回包含推荐位的结果
message ResultList {
  repeated CarListDto carLists = 1;
  repeated CarListDto recommendList = 2;
}