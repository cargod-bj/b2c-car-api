// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: recondition/recondition.proto

package recondition

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Recondition service

func NewReconditionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Recondition service

type ReconditionService interface {
	// 添加整备，返回 data：CarDto 类型
	Add(ctx context.Context, in *ReconditionDto, opts ...client.CallOption) (*common.Response, error)
	// 根据ID 删除，返回 data：nil
	Delete(ctx context.Context, in *ReconditionDto, opts ...client.CallOption) (*common.Response, error)
	// 跟新整备信息，返回 data：nil
	Update(ctx context.Context, in *ReconditionDto, opts ...client.CallOption) (*common.Response, error)
	// 获取整备信息：返回 data: CarDto
	Get(ctx context.Context, in *ReconditionDto, opts ...client.CallOption) (*common.Response, error)
	List(ctx context.Context, in *common.Page, opts ...client.CallOption) (*common.Response, error)
}

type reconditionService struct {
	c    client.Client
	name string
}

func NewReconditionService(name string, c client.Client) ReconditionService {
	return &reconditionService{
		c:    c,
		name: name,
	}
}

func (c *reconditionService) Add(ctx context.Context, in *ReconditionDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Recondition.Add", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reconditionService) Delete(ctx context.Context, in *ReconditionDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Recondition.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reconditionService) Update(ctx context.Context, in *ReconditionDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Recondition.Update", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reconditionService) Get(ctx context.Context, in *ReconditionDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Recondition.Get", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reconditionService) List(ctx context.Context, in *common.Page, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Recondition.List", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Recondition service

type ReconditionHandler interface {
	// 添加整备，返回 data：CarDto 类型
	Add(context.Context, *ReconditionDto, *common.Response) error
	// 根据ID 删除，返回 data：nil
	Delete(context.Context, *ReconditionDto, *common.Response) error
	// 跟新整备信息，返回 data：nil
	Update(context.Context, *ReconditionDto, *common.Response) error
	// 获取整备信息：返回 data: CarDto
	Get(context.Context, *ReconditionDto, *common.Response) error
	List(context.Context, *common.Page, *common.Response) error
}

func RegisterReconditionHandler(s server.Server, hdlr ReconditionHandler, opts ...server.HandlerOption) error {
	type recondition interface {
		Add(ctx context.Context, in *ReconditionDto, out *common.Response) error
		Delete(ctx context.Context, in *ReconditionDto, out *common.Response) error
		Update(ctx context.Context, in *ReconditionDto, out *common.Response) error
		Get(ctx context.Context, in *ReconditionDto, out *common.Response) error
		List(ctx context.Context, in *common.Page, out *common.Response) error
	}
	type Recondition struct {
		recondition
	}
	h := &reconditionHandler{hdlr}
	return s.Handle(s.NewHandler(&Recondition{h}, opts...))
}

type reconditionHandler struct {
	ReconditionHandler
}

func (h *reconditionHandler) Add(ctx context.Context, in *ReconditionDto, out *common.Response) error {
	return h.ReconditionHandler.Add(ctx, in, out)
}

func (h *reconditionHandler) Delete(ctx context.Context, in *ReconditionDto, out *common.Response) error {
	return h.ReconditionHandler.Delete(ctx, in, out)
}

func (h *reconditionHandler) Update(ctx context.Context, in *ReconditionDto, out *common.Response) error {
	return h.ReconditionHandler.Update(ctx, in, out)
}

func (h *reconditionHandler) Get(ctx context.Context, in *ReconditionDto, out *common.Response) error {
	return h.ReconditionHandler.Get(ctx, in, out)
}

func (h *reconditionHandler) List(ctx context.Context, in *common.Page, out *common.Response) error {
	return h.ReconditionHandler.List(ctx, in, out)
}
