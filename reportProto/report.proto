syntax = "proto3";

package report;

import "github.com/cargod-bj/b2c-proto-common/common/common.proto";

option go_package = "github.com/cargod-bj/b2c-car-api/reportProto";

/*
 * 报告服务
 */
service Report {
  // 根据carId获取report的详细信息
  // 返回：common.Response -> Data = ReportInfoDto
  rpc GetReportInfo(common.IdDto) returns (common.Response);
  // 根据leadId获取report的damage信息
  // 返回：common.Response -> Data = common.PagedList {
  //                  List<Any> = List<ReportDamageCategoryDto>
  //              }
  rpc GetDamageInfo(common.IdDto) returns (common.Response);
  // 对指定pointId的检测点做整备
  // 返回：common.Response  -> Data = nil
  rpc DoPointRecondition(PointReconditionDto) returns (common.Response);
  // 绑定Point上的图片，一次只能绑定一种类型，根据type区分
  // 返回：common.Response -> Data = nil
  rpc BindPointPhotos(BindPointPhotoDto) returns (common.Response);
  // 解绑Point上的图片，一次只能解绑定一种类型，根据type区分
  // 返回：common.Response -> Data = nil
  rpc UnbindPointPhotos(BindPointPhotoDto) returns (common.Response);
  // 根据车辆id完成整备
  // 返回：common.Response -> Data = nil
  rpc CompleteRecondition(common.IdDto) returns (common.Response);
}

// report的详细信息
message ReportInfoDto {
  // 车辆信息
  CarDto car = 1;
  // damage信息
  repeated ReportDamageCategoryDto damagePoints = 2;
}

// damage的顶层类别，每个顶层类别可能包含多个 子类别
message ReportDamageCategoryDto {
  // 当前category的id
  uint32 id = 1;
  // 当前category的Name
  string name = 2;
  // 当前category的子项，如果没有子项则为nil
  repeated ReportDamageSubCategoryDto children = 3;
  // 包含多少个point点
  uint32 totalPoint = 4;
  // 包含多少个没有修复的损坏点
  uint32 totalDamage = 5;
  // 包含多少个fixed数量
  uint32 totalFixed = 6;
  // 包含多少个replaced数量
  uint32 totalReplaced = 7;
}

// damage的子类别，每个子类别可能包含多个 监测点
message ReportDamageSubCategoryDto {
  // 当前category的id
  uint32 id = 1;
  // 当前category的Name
  string name = 2;
  // 当前category的子项，如果没有子项则为nil
  repeated ReportDamagePointDto points = 3;
  // 包含多少个point点
  uint32 totalPoint = 4;
  // 包含多少个没有修复的损坏点
  uint32 totalDamage = 5;
  // 包含多少个fixed数量
  uint32 totalFixed = 6;
  // 包含多少个replace数量
  uint32 totalReplaced = 7;
}

// damage的监测点，每个监测点可能包含多个 tag点，多个 损坏照片
message ReportDamagePointDto {
  // 当前point的id
  uint64 id = 1;
  // 当前point的Name
  string name = 2;
  // 当前point上的损坏点列表
  repeated string tags = 3;
  // 当前point上的损坏点图片
  repeated string photos = 4;
  // 是否已通过
  bool isPassed = 5;
  // 是否为na
  bool isNA = 6;
  // 当前监测点上的value值
  string tagValue = 7;
  // 当前监测点上备注的信息
  string remark = 8;
  // 当前监测点的损坏照片
  repeated string damagePhotos = 9;
  // 当前监测点的整备照片
  repeated string reconditionPhotos = 10;
  // 当前点的整备状态：0未整备，1 passed，2 damage, 3 fixed, 4 replaced
  uint32 reconditionType = 11;
  // 当前整备名称
  string reconditionTypeName = 12;
}

// 做Damage的整备message
message PointReconditionDto {
  // 当前point的id
  uint64 id = 1;
  // 当前point的remark，可以为空
  string remark = 2;
  // 当前point的整备类型：0 没有整备过，1 已修复，2 已更新
  ReconditionType reconditionType = 3;
}

// DamagePhotos
message BindPointPhotoDto {
  // 当前point的Id
  uint64 id = 1;
  // 要进行绑定的url或者解绑的url
  repeated string urls = 2;
  // 图片类型：0 damage，1 recondition
  uint64 type = 3;
}

// 整备类型
enum ReconditionType {
  // 没有整备过
  NO = 0;
  // 已修复
  FIXED = 1;
  // 已更新
  REPLACED = 2;
}


// 车辆dto，从car.proto复制过来的。后面修复了carProto包名问题后再考虑引用的方式解决
message CarDto {
  // 车辆id，如果为新增，则此字段为0，否则为车辆id
  uint64 id = 1;
  // 线索id
  uint64 leadId = 105;
  // 品牌id
  uint32 brandId = 201;
  // 车型id
  uint32 modelId = 202;
  // 品牌id
  string brandName = 204;
  // 车型id
  string modelName = 205;
  // 车variant
  uint32 variantId = 206;
  // 车variant
  string variant = 203;

  // 车照片url
  string image = 301;
  // 排量
  string engine = 401;
  // 年份
  uint32 year = 402;
  // 里程
  uint32 mileage = 403;
  // 驾驶类型 手动,自动
  uint32 transmission = 404;
  string transmissionName = 405;
  uint32 seat = 409;
  string fuelTypeName = 412;
  string colorName = 413;
  // 卖价
  string price = 501;
  // 来源
  string source = 601;
  // 城市地区
  string location = 701;
  // 城市地区id
  uint64 locationId = 702;
}