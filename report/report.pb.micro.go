// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: report/report.proto

package reportProto

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Report service

func NewReportEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Report service

type ReportService interface {
	// 根据leadId获取report的damage信息
	// 返回：common.Response -> List<Any> = List<ReconditionDto>
	GetDamageInfo(ctx context.Context, in *common.IdDto, opts ...client.CallOption) (*common.Response, error)
	// 对指定pointId的检测点做整备
	// 返回：common.Response  -> List = nil
	DoPointRecondition(ctx context.Context, in *PointReconditionDto, opts ...client.CallOption) (*common.Response, error)
	// 绑定Point上的图片，一次只能绑定一种类型，根据type区分
	// 返回：common.Response -> List = nil
	BindPointPhotos(ctx context.Context, in *BindPointPhotoDto, opts ...client.CallOption) (*common.Response, error)
	// 解绑Point上的图片，一次只能解绑定一种类型，根据type区分
	// 返回：common.Response -> List = nil
	UnbindPointPhotos(ctx context.Context, in *BindPointPhotoDto, opts ...client.CallOption) (*common.Response, error)
}

type reportService struct {
	c    client.Client
	name string
}

func NewReportService(name string, c client.Client) ReportService {
	return &reportService{
		c:    c,
		name: name,
	}
}

func (c *reportService) GetDamageInfo(ctx context.Context, in *common.IdDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Report.GetDamageInfo", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) DoPointRecondition(ctx context.Context, in *PointReconditionDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Report.DoPointRecondition", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) BindPointPhotos(ctx context.Context, in *BindPointPhotoDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Report.BindPointPhotos", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) UnbindPointPhotos(ctx context.Context, in *BindPointPhotoDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Report.UnbindPointPhotos", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Report service

type ReportHandler interface {
	// 根据leadId获取report的damage信息
	// 返回：common.Response -> List<Any> = List<ReconditionDto>
	GetDamageInfo(context.Context, *common.IdDto, *common.Response) error
	// 对指定pointId的检测点做整备
	// 返回：common.Response  -> List = nil
	DoPointRecondition(context.Context, *PointReconditionDto, *common.Response) error
	// 绑定Point上的图片，一次只能绑定一种类型，根据type区分
	// 返回：common.Response -> List = nil
	BindPointPhotos(context.Context, *BindPointPhotoDto, *common.Response) error
	// 解绑Point上的图片，一次只能解绑定一种类型，根据type区分
	// 返回：common.Response -> List = nil
	UnbindPointPhotos(context.Context, *BindPointPhotoDto, *common.Response) error
}

func RegisterReportHandler(s server.Server, hdlr ReportHandler, opts ...server.HandlerOption) error {
	type report interface {
		GetDamageInfo(ctx context.Context, in *common.IdDto, out *common.Response) error
		DoPointRecondition(ctx context.Context, in *PointReconditionDto, out *common.Response) error
		BindPointPhotos(ctx context.Context, in *BindPointPhotoDto, out *common.Response) error
		UnbindPointPhotos(ctx context.Context, in *BindPointPhotoDto, out *common.Response) error
	}
	type Report struct {
		report
	}
	h := &reportHandler{hdlr}
	return s.Handle(s.NewHandler(&Report{h}, opts...))
}

type reportHandler struct {
	ReportHandler
}

func (h *reportHandler) GetDamageInfo(ctx context.Context, in *common.IdDto, out *common.Response) error {
	return h.ReportHandler.GetDamageInfo(ctx, in, out)
}

func (h *reportHandler) DoPointRecondition(ctx context.Context, in *PointReconditionDto, out *common.Response) error {
	return h.ReportHandler.DoPointRecondition(ctx, in, out)
}

func (h *reportHandler) BindPointPhotos(ctx context.Context, in *BindPointPhotoDto, out *common.Response) error {
	return h.ReportHandler.BindPointPhotos(ctx, in, out)
}

func (h *reportHandler) UnbindPointPhotos(ctx context.Context, in *BindPointPhotoDto, out *common.Response) error {
	return h.ReportHandler.UnbindPointPhotos(ctx, in, out)
}
