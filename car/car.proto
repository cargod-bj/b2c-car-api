syntax = "proto3";

package car;

import "github.com/cargod-bj/b2c-proto-common/common/common.proto";
import "reportProto/report.proto";

option go_package = "github.com/cargod-bj/b2c-car-api/carProto";

/*
  获取车辆服务
 */
service Car {
  // 添加指定车辆，返回 data：CarDto 类型
  rpc Add(CarDto) returns (common.Response) {}
  // 根据车辆id删除车辆，返回 data：nil
  rpc Delete(CarIdsDto) returns (common.Response) {}
  // 更新指定车辆，返回 data：nil
  rpc Update(UpdateCarDto) returns (common.Response) {}
  // 获取指定id的车辆：返回 data: CarDto List
  rpc Get(CarIdsDto) returns (common.Response) {}
  // 给website专用的接口，获取指定id的车辆：返回 data: CarDto List
  rpc GetForWebsite(CarIdsDto) returns (common.Response) {}
  //获取车辆列表: 返回data：common.PagedList：CarDto
  rpc List(CarListParams) returns (common.Response) {}
  //获取车辆来源李彪
  rpc SourceList(SourceParams) returns (common.Response) {}
  //添加车辆到平台
  rpc AddFromSource(AddFromSourceParams) returns (common.Response) {}
  rpc AddFromSourceList(AddFromSourceListParams) returns (common.Response) {}

  // 添加第三方车辆，返回 data：nil
  rpc AddPartnerCar(AddPartnerCarReq) returns (common.Response) {}

  // 上架车辆
  rpc LaunchCar(common.IdDto) returns (common.Response) {}
  // 查询车辆可能变更的状态列表：返回 Data = common.PageList{
  //              List = List<carEnumProto.KeyValueDto>
  //          }
  rpc GetValidState(GetValidStateReq) returns (common.Response) {}

  // 更改车辆状态：返回 Data = nil
  rpc ChangeCarState(ChangeCarStateReq) returns (common.Response) {}
  // 更改库存状态
  rpc ChangeInventoryStatus(ChangeCarStateReq) returns (common.Response) {}
  // 获取指定carNo的车辆：返回 data: CarDto
  rpc GetCarByCarNo(CarNoDto) returns (common.Response) {}
  // 获取车辆No模糊搜索车辆信息：返回 data: CarDtoList
  rpc GetCarByNoFuzzy(CarNoDto) returns (common.Response) {}
  // 获取车辆详情页的访问token：返回 Data = CarDetailAccessTokenResp
  rpc GetCarDetailAccessToken(CarNoReq) returns (common.Response) {}
}


message GetValidStateReq {
  // 车辆id
  uint64 carId = 1;
  // 获取类型：1 只获取整备相关，2 只获取交易中(不包含)前 3 全量获取
  uint32 getType = 2;
}

// 更改车辆状态入参对象
message ChangeCarStateReq {
  // 要更改的车辆id
  uint64 carId = 1;
  // 要更改的目标state，参见car-api项目 enums.CarStateXxx 枚举进行入参
  uint32 toState = 2;
  string city = 3;
  string cityName = 4;
  uint64 storeId = 5;
}

message SourceParams{
  common.Page page = 1;
  string lead_id = 2;
}

message AddFromSourceParams{
  uint64 id = 1;
  uint64 dealerId = 2;
  uint64 storeId = 3;
  uint64 dealershipType = 4;
  // 操作人员id，现在对应b2c-gateway库中的sys_user表中的id字段
  uint64 operatorId = 5;
}

message AddFromSourceListParams{
  repeated AddFromSourceParams list = 1;
  // 操作人员id，现在对应b2c-gateway库中的sys_user表中的id字段
  uint64 operatorId = 2;
}

//新增第三方车辆
message AddPartnerCarReq{
  // 操作人员id，现在对应b2c-gateway库中的sys_user表中的id字段
  uint64 operatorId = 1;
  uint32 dealerId = 2;
  uint64 storeId = 3;
  uint32 brandId = 4;
  uint32 modelId = 5;
  uint32 year = 6;
  uint32 variantId = 7;
  string engine = 8;
  uint32 transmission = 9;
  string licensePlateNumber = 10;
}

message CarListParams{
  common.Page page = 1;
  string local = 2;
  // 车辆状态
  uint32 carState = 4;
  // 在架状态
  uint32 saleStatus = 5;
  // 库存状态
  uint32 inventoryStatus = 6;
  // dealer类型：carsome、partner
  uint32 dealerType = 7;
  // dealer id
  uint64 dealerId = 8;
  // store id
  uint64 storeId = 9;
  // brand id
  uint64 brandId = 20;
  // model id
  uint64 modelId = 21;
  // 车辆年份
  uint32 year = 22;
  // 车辆variant
  int64 variantId = 23;
  // 车辆engine
  string engine = 24;
  // 车辆变速箱：手动、自动
  uint32 transmission = 25;
  // 导入时间：开始
  uint64 importTimeStart = 40;
  // 导入时间：结束
  uint64 importTimeEnd = 41;
  // 更新时间：开始
  uint64 updateTimeStart = 42;
  // 更新时间：结束
  uint64 updateTimeEnd = 43;
  // 车辆编号
  string carNo = 50;
  // c2b中的id
  uint64 inspectionId = 51;
  // 车牌号
  string licensePlate = 52;
  // 下次保养时间：开始
  uint64 nextMaintenanceDateStart = 53;
  // 下次保养时间：结束
  uint64 nextMaintenanceDateEnd = 54;
  // 检车：开始
  uint64 puspakomUntilDateStart = 55;
  // 检车：结束
  uint64 puspakomUntilDateEnd = 56;
}


message CarSourceDto {
  string location = 1;
  uint64 inspection_id = 2;
  uint64 lead_id = 3;
  uint64 inspection_date = 4;
  string inspector = 5;
  string car_brand = 6;
  string car_model = 7;
  string car_variant = 8;
  string car_engine = 9;
  string car_year = 10;
  string car_mileage = 11;
  string car_transmission = 12;
  string license_plate = 13;
  int32 status = 14;
  uint32 dealer_id = 15;
  string dealer_name = 16;
}
// 新增车辆dto
message CarDto {
  // 车辆id，如果为新增，则此字段为0，否则为车辆id
  uint64 id = 1;
  // 车辆的创建时间，如果为新增，或更新，则此字段无效
  uint64 create_time = 2;
  // 车辆的更新时间，如果为新增，或更新，则此字段无效
  uint64 update_time = 3;
  // 车辆编码
  string car_no = 4;
  // 车辆状态：100 待整备，110整备中，120待核查，130核查失败，200待交易，210交易中，220已出售
  uint32 car_state = 5;
  // 上架状态：1 已上架，2未上架
  uint32 sale_status = 6;
  // 检查报告id
  uint64 inspection_id = 101;
  // 车辆状态
  uint32 status = 102;
  // 门店id
  uint64 store_id = 103;
  // 线索id
  uint64 lead_id = 105;
  // 品牌id
  uint32 brand_id = 201;
  // 车型id
  uint32 model_id = 202;
  // 车variant
  string car_variant = 203;
  // 品牌id
  string brand_name = 204;
  // 车型id
  string model_name = 205;
  // 车variant
  int64 variant_id = 206;
  // vin码
  string vin_code = 207;
  // 车牌号
  string license_plate = 208;
  // carBodyType
  uint32 car_type_id = 209;
  // 车辆原始信息
  string car_original_info = 210;
  // 车辆钥匙：1有、2没有
  uint32 spare_key = 211;
  string spare_key_name = 212;
  // 车辆保修证书：1有、2没有
  uint32 service_book = 213;
  string service_book_name = 214;
  // 主机厂保修：1有、2没有
  uint32 principle_warranty = 215;
  string principle_warranty_name = 216;
  // 主机厂保修到期日
  uint64 warranty_expiration_date = 217;
  // 主机厂保修最大公里
  uint64 warranty_max_mileage = 218;

  // 车照片url
  string image = 301;
  // 图片列表: 内饰
  repeated CarResourceDto images_inner = 302;
  // 图片列表：外部
  repeated CarResourceDto images_outer = 303;
  // spinCar链接
  string spin_car_url = 304;
  // 排量
  string car_engine = 401;
  // 年份
  uint32 car_year = 402;
  // 里程
  uint32 car_mileage = 403;
  // 驾驶类型 手动,自动
  uint32 car_transmission = 404;

  string car_transmission_name = 405;
  uint32 registration_type = 406;
  string registration_type_name = 407;
  uint64 registration_date = 408;
  uint32 seat = 409;
  uint32 color = 410;
  uint32 fuel_type = 411;
  string fuel_type_name = 412;
  string colorName = 413;

  // 车辆上绑定的tag, 单选
  CarTags tag = 414;
  // 车辆描述，主要是partner填写
  string description = 415;
  // c2b中的颜色
  string c2b_color = 416;
  // c2b中的fuelType
  string c2b_fuel_type = 417;
  // 下次整备日期
  uint64 next_maintenance_date = 418;

  // 卖价
  string exp_selling_price = 501;
  // 收车价
  string purchase_price = 502;
  // 交易佣金
  string handling_fee = 503;
  // 来源
  string source = 601;
  // 城市地区
  string location = 701;
  // 城市地区id
  uint64 location_id = 702;
  // dealerId
  uint64 dealer_id = 703;
  // dealerType
  uint32 dealer_type = 704;
  // dealerTypeName
  string dealer_type_name = 705;
  // 详细地址，如：地下停车场，B105车位
  string location_address = 706;

  // 整备渠道
  string recondition_channel = 801;
  // 整备金
  string recondition_cost = 802;
  // 整备项目
  string recondition_content = 803;
  // 整备单据
  repeated CarResourceDto recondition_files = 804;

  // 库存状态
  string inventory_status = 901;
  string city = 902;
  string cityName = 903;

  // 活动
  uint64 campaign_id = 1001;
  string campaign_price = 1002;

}

// 车辆更新Dto
message UpdateCarDto {
  CarDto car = 1;
  // 当编辑时变更的point信息
  repeated report.ReportDamagePointDto points = 2;
  string remark = 3;
  // 操作人员id，现在对应b2c-gateway库中的sys_user表中的id字段
  uint64 operatorId = 4;
}

// 车辆的id
message CarIdsDto {
  // 车辆id
  repeated uint64 ids = 1;
  string local = 2;
}
message CarDtoList{
  repeated CarDto CarDtoList = 1;
}

message CarTags {
  uint64 id = 1;
  string name = 3;
}

message CarResourceDto {
  uint64 id = 1;
  string name = 2;
  string url = 3;
}

// 车辆的id
message CarNoDto {
  // 车辆id
  string carNo = 1;
  uint64 storeId = 2;
  repeated uint32 carStatus = 4;
  string local = 5;
}

// 车辆no的请求实体
message CarNoReq {
  // 车辆no
  string carNo = 1;
  // 本地化信息
  string local = 10;
}
// 获取车辆详情页的访问token的返回结果。
message CarDetailAccessTokenResp {
  string token = 1;
}