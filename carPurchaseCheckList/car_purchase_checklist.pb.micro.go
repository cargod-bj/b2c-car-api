// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: carPurchaseCheckList/car_purchase_checklist.proto

package carPurchaseCheckList

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CarPurchaseCheckList service

func NewCarPurchaseCheckListEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CarPurchaseCheckList service

type CarPurchaseCheckListService interface {
	// get fileadress to carpurchase file
	GetAdress(ctx context.Context, in *CarPurchaseIdReq, opts ...client.CallOption) (*common.Response, error)
	// save fileadress to database table carsource
	SaveAdress(ctx context.Context, in *PurchaseFileDto, opts ...client.CallOption) (*common.Response, error)
	GenerateCheckList(ctx context.Context, in *IdReq, opts ...client.CallOption) (*common.Response, error)
	//updates checklist according to the ID
	Updates(ctx context.Context, in *UpdatesReq, opts ...client.CallOption) (*common.Response, error)
	//create a checklist based on the car-purchase ID
	Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*common.Response, error)
	Creates(ctx context.Context, in *BatchCreate, opts ...client.CallOption) (*common.Response, error)
	//get a checklist according to the car-purchase ID
	GetList(ctx context.Context, in *CarPurchaseIdReq, opts ...client.CallOption) (*common.Response, error)
	//update checklist according to the ID
	Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*common.Response, error)
	//drop checklist according to the ID
	Delete(ctx context.Context, in *IdReq, opts ...client.CallOption) (*common.Response, error)
}

type carPurchaseCheckListService struct {
	c    client.Client
	name string
}

func NewCarPurchaseCheckListService(name string, c client.Client) CarPurchaseCheckListService {
	return &carPurchaseCheckListService{
		c:    c,
		name: name,
	}
}

func (c *carPurchaseCheckListService) GetAdress(ctx context.Context, in *CarPurchaseIdReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarPurchaseCheckList.GetAdress", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPurchaseCheckListService) SaveAdress(ctx context.Context, in *PurchaseFileDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarPurchaseCheckList.SaveAdress", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPurchaseCheckListService) GenerateCheckList(ctx context.Context, in *IdReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarPurchaseCheckList.GenerateCheckList", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPurchaseCheckListService) Updates(ctx context.Context, in *UpdatesReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarPurchaseCheckList.Updates", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPurchaseCheckListService) Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarPurchaseCheckList.Create", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPurchaseCheckListService) Creates(ctx context.Context, in *BatchCreate, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarPurchaseCheckList.Creates", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPurchaseCheckListService) GetList(ctx context.Context, in *CarPurchaseIdReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarPurchaseCheckList.GetList", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPurchaseCheckListService) Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarPurchaseCheckList.Update", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPurchaseCheckListService) Delete(ctx context.Context, in *IdReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CarPurchaseCheckList.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CarPurchaseCheckList service

type CarPurchaseCheckListHandler interface {
	// get fileadress to carpurchase file
	GetAdress(context.Context, *CarPurchaseIdReq, *common.Response) error
	// save fileadress to database table carsource
	SaveAdress(context.Context, *PurchaseFileDto, *common.Response) error
	GenerateCheckList(context.Context, *IdReq, *common.Response) error
	//updates checklist according to the ID
	Updates(context.Context, *UpdatesReq, *common.Response) error
	//create a checklist based on the car-purchase ID
	Create(context.Context, *CreateReq, *common.Response) error
	Creates(context.Context, *BatchCreate, *common.Response) error
	//get a checklist according to the car-purchase ID
	GetList(context.Context, *CarPurchaseIdReq, *common.Response) error
	//update checklist according to the ID
	Update(context.Context, *UpdateReq, *common.Response) error
	//drop checklist according to the ID
	Delete(context.Context, *IdReq, *common.Response) error
}

func RegisterCarPurchaseCheckListHandler(s server.Server, hdlr CarPurchaseCheckListHandler, opts ...server.HandlerOption) error {
	type carPurchaseCheckList interface {
		GetAdress(ctx context.Context, in *CarPurchaseIdReq, out *common.Response) error
		SaveAdress(ctx context.Context, in *PurchaseFileDto, out *common.Response) error
		GenerateCheckList(ctx context.Context, in *IdReq, out *common.Response) error
		Updates(ctx context.Context, in *UpdatesReq, out *common.Response) error
		Create(ctx context.Context, in *CreateReq, out *common.Response) error
		Creates(ctx context.Context, in *BatchCreate, out *common.Response) error
		GetList(ctx context.Context, in *CarPurchaseIdReq, out *common.Response) error
		Update(ctx context.Context, in *UpdateReq, out *common.Response) error
		Delete(ctx context.Context, in *IdReq, out *common.Response) error
	}
	type CarPurchaseCheckList struct {
		carPurchaseCheckList
	}
	h := &carPurchaseCheckListHandler{hdlr}
	return s.Handle(s.NewHandler(&CarPurchaseCheckList{h}, opts...))
}

type carPurchaseCheckListHandler struct {
	CarPurchaseCheckListHandler
}

func (h *carPurchaseCheckListHandler) GetAdress(ctx context.Context, in *CarPurchaseIdReq, out *common.Response) error {
	return h.CarPurchaseCheckListHandler.GetAdress(ctx, in, out)
}

func (h *carPurchaseCheckListHandler) SaveAdress(ctx context.Context, in *PurchaseFileDto, out *common.Response) error {
	return h.CarPurchaseCheckListHandler.SaveAdress(ctx, in, out)
}

func (h *carPurchaseCheckListHandler) GenerateCheckList(ctx context.Context, in *IdReq, out *common.Response) error {
	return h.CarPurchaseCheckListHandler.GenerateCheckList(ctx, in, out)
}

func (h *carPurchaseCheckListHandler) Updates(ctx context.Context, in *UpdatesReq, out *common.Response) error {
	return h.CarPurchaseCheckListHandler.Updates(ctx, in, out)
}

func (h *carPurchaseCheckListHandler) Create(ctx context.Context, in *CreateReq, out *common.Response) error {
	return h.CarPurchaseCheckListHandler.Create(ctx, in, out)
}

func (h *carPurchaseCheckListHandler) Creates(ctx context.Context, in *BatchCreate, out *common.Response) error {
	return h.CarPurchaseCheckListHandler.Creates(ctx, in, out)
}

func (h *carPurchaseCheckListHandler) GetList(ctx context.Context, in *CarPurchaseIdReq, out *common.Response) error {
	return h.CarPurchaseCheckListHandler.GetList(ctx, in, out)
}

func (h *carPurchaseCheckListHandler) Update(ctx context.Context, in *UpdateReq, out *common.Response) error {
	return h.CarPurchaseCheckListHandler.Update(ctx, in, out)
}

func (h *carPurchaseCheckListHandler) Delete(ctx context.Context, in *IdReq, out *common.Response) error {
	return h.CarPurchaseCheckListHandler.Delete(ctx, in, out)
}
